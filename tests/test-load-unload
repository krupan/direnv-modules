#!/bin/sh
######################################################################
# load two dmodules, unload one
######################################################################
set -e
. ./test-funcs
# start clean
rm -f .envrc
PATH=../:$PATH DMODULEPATH=./dmodulefiles/ ../dm load bar/1.0
# I hate that there isn't a more deterministic way to wait until the
# above finishes creating the file in
# /home/bryan/.local/share/direnv/allow/
sleep 1
PATH=../:$PATH DMODULEPATH=./dmodulefiles/ ../dm load foo/2.3
sleep 1
EXPECTED_TEXT_BAR="source_env dmodulefiles/bar/1.0"
EXPECTED_TEXT_FOO="source_env dmodulefiles/foo/2.3"
if ! grep -qs "$EXPECTED_TEXT_BAR" .envrc; then
    end_test "$0" fail
fi
if ! grep -qs "$EXPECTED_TEXT_FOO" .envrc; then
    end_test "$0" fail
fi
BAR=$(direnv exec . sh -c 'echo $BAR')
if [ ! "$BAR" = "bar 1.0 loaded" ]; then
    end_test "$0" fail
fi
FOO=$(direnv exec . sh -c 'echo $FOO')
if [ ! "$FOO" = "foo 2.3 loaded" ]; then
    end_test "$0" fail
fi

PATH=../:$PATH DMODULEPATH=./dmodulefiles/ ../dm unload bar/1.0
sleep 1
if grep -qs "$EXPECTED_TEXT_BAR" .envrc; then
    end_test "$0" fail
fi
BAR=$(direnv exec . sh -c 'echo $BAR')
if [ ! "$BAR" = "" ]; then
    end_test "$0" fail
fi
end_test "$0" pass
